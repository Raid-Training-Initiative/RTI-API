#%RAML 1.0
title: RTI API
types:
  RaidSummary: !include types/RaidSummary.raml
  Raid: !include types/Raid.raml
  Member: !include types/Member.raml
  Log: !include types/Log.raml
  Comp: !include types/Comp.raml
  Category: !include types/Category.raml
  Status: !include types/Status.raml
traits:
  requiresAuthentication:
    headers:
      Authorization:
        description: Basic authentication with a 64-character client secret.
        type: string
        required: true
        example: "Basic 22AB6BsFYJgqqclNbknmUr7gG0nn5qtiXgdxJP7G0dTnkUjSN5nZNFca3M8Wfe3k"
    responses:
      401:
        body:
          application/json:
            description: Error response when authentication failed.
            example: !include examples/errors/unauthorized.json
  supportsPagination:
    queryParameters:
      page:
        type: number
        description: A number greater than 0 indicating what page of results to return.
        example: 4
      pageSize:
        type: number
        description: A number greater than 0 indicating how many results to return per page.
        example: 20
  multiFormat:
    queryParameters:
      format:
        type: string
        description: A case-insensitive string to define whether to return a JSON or CSV response.
        enum: ["csv", "json"]


/raids:
  get:
    description: Gets a list of the saved raids. Each raid is summarised and certain fields are left out for a cleaner view.
    is: ["requiresAuthentication", "supportsPagination", "multiFormat"]
    queryParameters:
      status:
        type: string
        description: A comma-separated, case-insensitive string to filter the raids by status.
        example: "draft,published,archived"
      name:
        type: string
        description: A case-insensitive string to filter the raids by name. Returns raids whose name contains the filter query string as a substring.
        example: "continuation"
      comps:
        type: string
        description: A comma-separated, case-insensitive string to filter the raids by comp names.
        example: "DoubleChrono,Dhuum-RR"
      leader:
        type: string
        description: A case-insensitive string with all numbers and dots and hashtags removed to filter the raids by leader name.
        example: Step
      published:
        type: boolean
        description: A boolean indicating whether or not to only output published raids.
        example: true
      participants:
        type: string
        description: A comma-separated, case-sensitive string to filter the raids by participants' Discord names. All participants in this query list have to be present as participants in the raid.
        example: "Step%231937,Christin%230112"
      reserves:
        type: string
        description: A comma-separated, case-sensitive string to filter the raids by reserves' Discord names. All reserves in this query list have to be present as reserves in the raid.
        example: "Step%231937,Christin%230112"
    responses:
      200:
        body:
          application/json:
            description: A list of raids in JSON format.
            type: RaidSummary[]
            example: !include examples/responses/json/list-raids.json
          application/csv:
            description: A list of raids in CSV format.
            example: !include examples/responses/csv/list-raids.csv
      400:
        body:
          application/json:
            description: Error response when syntax is invalid.
            example: !include examples/errors/bad-syntax-bad-status.json
      404:
        body:
          application/json:
            description: Error response when the specified leader was not found.
            example: !include examples/errors/resource-not-found.json
  /{id}:
    get:
      description: Gets a single raid.
      is: ["requiresAuthentication"]
      queryParameters:
        names:
          type: string
          description: A case-insensitive string specifying what values the names should be.
          enum: ["gw2", "discord"]
      responses:
        200:
          body:
            application/json:
              description: A raid.
              type: Raid
              example: !include examples/responses/json/get-raid.json
        400:
          body:
            application/json:
              description: Error response when syntax is invalid.
              example: !include examples/errors/bad-syntax-bad-names.json
        404:
          body:
            application/json:
              description: Error response when the raid ID being requested is not found.
              example: !include examples/errors/resource-not-found.json
    /log:
      get:
        description: Gets the event log of a raid.
        is: ["requiresAuthentication"]
        queryParameters:
          names:
            type: string
            description: A case-insensitive string specifying what values the names should be.
            enum: ["gw2", "discord"]
        responses:
          200:
            body:
              application/json:
                description: A list of raid event logs.
                type: Log[]
          400:
            body:
              application/json:
                description: Error response when syntax is invalid.
                example: !include examples/errors/bad-syntax-bad-names.json
          404:
            body:
              application/json:
                description: Error response when the raid ID being requested is not found.
                example: !include examples/errors/resource-not-found.json

/members:
  get:
    description: Gets a list of the saved members.
    is: ["requiresAuthentication", "supportsPagination", "multiFormat"]
    queryParameters:
      gw2Name:
        type: string
        description: Filter by gw2Name of the member (can be incomplete).
        example: John.5231
      discordTag:
        type: string
        description: Filter by discordTag of the member (can be incomplete). Needs to be URI-safe, so use %23 instead of hashtags!
        example: John%231529
      approver:
        type: string
        description: Filter by the discordTag of the approver of the member.
        example: Tim%236391
      banned:
        type: boolean
        description: Filter by whether or not the member is currently banned.
        example: true
    responses:
      200:
        body:
          application/json:
            description: A list of members in JSON format.
            type: Member[]
            example: !include examples/responses/json/list-members.json
          application/csv:
            description: A list of members in CSV format.
            example: !include examples/responses/csv/list-members.csv
      400:
        body:
          application/json:
            description: Error response when syntax is invalid.
            example: !include examples/errors/invalid-query-parameters.json
      404:
        body:
          application/json:
            description: Error response when the approver in the query parameter does not exist.
            example: !include examples/errors/resource-not-found.json
  /{discordid}:
    get:
      description: Gets a single member by their userId.
      is: ["requiresAuthentication"]
      responses:
        200:
          body:
            application/json:
              description: A member.
              type: Member
              example: !include examples/responses/json/get-member.json
        400:
          body:
            application/json:
              description: Error response when syntax is invalid.
              example: !include examples/errors/invalid-query-parameters.json
        404:
          body:
            application/json:
              description: Error response when the member's userId does not exist.
              example: !include examples/errors/resource-not-found.json

/comps:
  get:
    description: Gets a list of the saved raid squad compositions.
    is: ["requiresAuthentication"]
    queryParameters:
      category:
        type: string
        description: A comma-separated, case-insensitive string to filter compositions by categories.
        example: "Generic,Other,Wing%205"
    responses:
      200:
        body:
          application/json:
            description: A list of compositions.
            type: Comp[]
            example: !include examples/responses/json/list-comps.json
      400:
        body:
          application/json:
            description: Error response when syntax is invalid.
            example: !include examples/errors/invalid-query-parameters.json
  /{comp}:
    get:
      description: Gets a single raid squad composition by name.
      is: ["requiresAuthentication"]
      responses:
        200:
          body:
            application/json:
              description: A composition.
              type: Comp
              example: !include examples/responses/json/get-comp.json
        400:
          body:
            application/json:
              description: Error response when syntax is invalid.
              example: !include examples/errors/invalid-query-parameters.json 
        404:
          body:
            application/json:
              description: Error response when the requested comp could not be found.
              example: !include examples/errors/resource-not-found.json

/categories:
  get:
    description: Gets a list of the saved raid squad composition categories.
    is: ["requiresAuthentication"]
    responses:
      200:
        body:
          application/json:
            description: A list of categories.
            type: Category[]
            example: !include examples/responses/json/list-categories.json
      400:
        body:
          application/json:
            description: Error response when syntax is invalid.
            example: !include examples/errors/invalid-query-parameters.json
  /{category}:
    get:
      description: Gets a single raid squad composition category by name.
      is: ["requiresAuthentication"]
      responses:
        200:
          body:
            application/json:
              description: A category.
              type: Category
              example: !include examples/responses/json/get-category.json
        400:
          body:
            application/json:
              description: Error response when syntax is invalid.
              example: !include examples/errors/invalid-query-parameters.json 
        404:
          body:
            application/json:
              description: Error response when the requested category could not be found.
              example: !include examples/errors/resource-not-found.json

/status:
  get:
    description: Returns an object providing details on the API.
    responses:
      200:
        body:
          application/json:
            description: A status object.
            type: Status
            example: !include examples/responses/json/get-status.json
      400:
        body:
          application/json:
            description: Error response when syntax is invalid.
            example: !include examples/errors/invalid-query-parameters.json
      500:
        body:
          application/json:
            description: Error response when package.json file could not be found.
            example: !include examples/errors/package-json-not-found.json